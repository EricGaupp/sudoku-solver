{"version":3,"sources":["components/Header.tsx","components/Puzzle.tsx","components/SolveButton.tsx","components/Solutions.tsx","components/SettingsFab.tsx","components/App.tsx","serviceWorker.ts","store/PuzzleStore.ts","store/UIStore.ts","index.tsx","store/RootStore.ts"],"names":["Header","Grid","item","container","justify","Typography","variant","align","useStyles","makeStyles","theme","row","borderLeft","palette","text","primary","borderRight","borderTop","borderBottom","column","inputBase","margin","spacing","removedArrows","textAlign","WebkitAppearance","Puzzle","puzzleStore","useStore","classes","useObserver","direction","alignItems","puzzleState","map","yIndex","key","className","xs","md","lg","xIndex","InputBase","type","fullWidth","inputProps","min","max","onChange","event","y","x","input","newGridValue","parseInt","isValidNumber","setNumber","handleChange","target","value","ColorButton","withStyles","root","color","success","contrastText","backgroundColor","main","dark","Button","SolveButton","handleSolveClick","clearSolutions","solve","onClick","Solutions","numSolutions","solutions","solution","index","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","fab","position","bottom","right","SettingsFab","uiStore","useTheme","Fab","aria-label","toggleDarkMode","marginTop","App","ThemeProvider","createMuiTheme","themeOptions","CssBaseline","Boolean","window","location","hostname","match","PuzzleStore","rootStore","this","v","checkIfValuePossible","push","slice","includes","rowPossible","checkRowForValue","columnPossible","checkColumnForValue","subSquarePossible","checkSubSquareForValue","i","x0","Math","floor","y0","j","length","observable","action","computed","UIStore","StoreContext","createContext","useContext","ReactDOM","render","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7181e16.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Grid, Typography } from \"@material-ui/core\";\n\nconst Header: React.FC = () => {\n  return (\n    <Grid item container justify=\"center\">\n      <Typography variant=\"h2\" align=\"center\">\n        Sudoku Solver\n      </Typography>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\n//MobX\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../index\";\n\n//MaterialUI Components\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid, InputBase } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  row: {\n    borderLeft: `3px solid ${theme.palette.text.primary}`,\n    borderRight: `3px solid ${theme.palette.text.primary}`,\n    \"&:nth-child(n)\": {\n      borderTop: `1px solid ${theme.palette.text.primary}`\n    },\n    \"&:nth-child(3n-2)\": {\n      borderTop: `3px solid ${theme.palette.text.primary}`\n    },\n    \"&:last-child\": {\n      borderBottom: `3px solid ${theme.palette.text.primary}`\n    }\n  },\n  column: {\n    \"&:first-child\": {\n      borderLeft: \"none\"\n    },\n    \"&:nth-child(n+2)\": {\n      borderLeft: `1px solid ${theme.palette.text.primary}`\n    },\n    \"&:nth-child(3n)\": {\n      borderRight: `3px solid ${theme.palette.text.primary}`\n    },\n    \"&:last-child\": {\n      borderRight: \"none\"\n    }\n  },\n  inputBase: {\n    margin: theme.spacing(1)\n  },\n  removedArrows: {\n    textAlign: \"center\",\n    \"&::-webkit-inner-spin-button, input::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: 0\n    }\n  }\n}));\n\nconst Puzzle: React.FC = () => {\n  const { puzzleStore } = useStore();\n  const classes = useStyles();\n\n  function handleChange(y: number, x: number, input: string) {\n    let newGridValue: number | \"\";\n    if (parseInt(input, 10) > 0 && parseInt(input, 10) < 10) {\n      newGridValue = parseInt(input, 10);\n    } else if (input === \"\") {\n      newGridValue = \"\";\n    } else {\n      return;\n    }\n    if (puzzleStore.isValidNumber(newGridValue)) {\n      puzzleStore.setNumber(y, x, newGridValue);\n    }\n  }\n\n  return useObserver(() => (\n    <Grid item container direction=\"column\" alignItems=\"center\">\n      {puzzleStore.puzzleState.map((row, yIndex) => (\n        <Grid\n          key={`row${yIndex}`}\n          className={classes.row}\n          item\n          xs={11}\n          md={9}\n          lg={6}\n          container\n        >\n          {row.map((column, xIndex) => (\n            <Grid\n              key={`y${yIndex}x${xIndex}`}\n              className={classes.column}\n              item\n              xs\n              container\n            >\n              <InputBase\n                className={classes.inputBase}\n                type=\"number\"\n                fullWidth\n                inputProps={{\n                  min: 1,\n                  max: 9,\n                  className: classes.removedArrows\n                }}\n                onChange={event =>\n                  handleChange(yIndex, xIndex, event.target.value)\n                }\n                value={puzzleStore.puzzleState[yIndex][xIndex]}\n              />\n            </Grid>\n          ))}\n        </Grid>\n      ))}\n    </Grid>\n  ));\n};\n\nexport default Puzzle;\n","import React from \"react\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../index\";\n\n//MaterialUI Components\nimport { Theme, withStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\n\nconst ColorButton = withStyles((theme: Theme) => ({\n  root: {\n    color: theme.palette.success.contrastText,\n    backgroundColor: theme.palette.success.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.success.dark\n    }\n  }\n}))(Button);\n\nconst SolveButton: React.FC = () => {\n  const { puzzleStore } = useStore();\n\n  const handleSolveClick = () => {\n    puzzleStore.clearSolutions();\n    puzzleStore.solve();\n  };\n\n  return useObserver(() => (\n    <Grid item>\n      <ColorButton variant=\"contained\" onClick={handleSolveClick}>\n        Solve\n      </ColorButton>\n    </Grid>\n  ));\n};\n\nexport default SolveButton;\n","import React from \"react\";\n\n//MobX\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../index\";\n\n//MaterialUI Components\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\n\n//Icons\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n//Types\nimport { SudokuGrid } from \"../types/SudokuTypes\";\n\nconst Solutions: React.FC = () => {\n  const { puzzleStore } = useStore();\n  return useObserver(() => (\n    <>\n      <Grid item>\n        <Typography variant=\"subtitle1\">{`Number of Solutions: ${puzzleStore.numSolutions}`}</Typography>\n      </Grid>\n      <Grid\n        item\n        xs={11}\n        md={9}\n        lg={6}\n        container\n        alignItems=\"center\"\n        direction=\"column\"\n      >\n        <Grid item>\n          {puzzleStore.solutions.map((solution: SudokuGrid, index: number) => (\n            <ExpansionPanel key={index}>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls={`solution${index}`}\n                id={`solution${index}-header`}\n              >\n                <Typography>{`Solution ${index + 1}`}</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <Typography>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  Suspendisse malesuada lacus ex, sit amet blandit leo lobortis\n                  eget.\n                </Typography>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          ))}\n        </Grid>\n      </Grid>\n    </>\n  ));\n};\n\nexport default Solutions;\n","import React from \"react\";\nimport { useStore } from \"../index\";\n\n//MaterialUI Components\nimport { makeStyles, Theme, useTheme } from \"@material-ui/core/styles\";\nimport { Fab } from \"@material-ui/core\";\n\n//Material Icons\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nconst SettingsFab: React.FC = () => {\n  const { uiStore } = useStore();\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <>\n      <Fab\n        aria-label=\"Settings\"\n        aria-controls=\"settings-menu\"\n        className={classes.fab}\n        onClick={() => uiStore.toggleDarkMode()}\n      >\n        {theme.palette.type === \"dark\" ? (\n          <BrightnessHighIcon />\n        ) : (\n          <Brightness3Icon />\n        )}\n      </Fab>\n    </>\n  );\n};\n\nexport default SettingsFab;\n","import React from \"react\";\n\n//MobX\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../index\";\n\n//MaterialUI Components\nimport {\n  createMuiTheme,\n  makeStyles,\n  ThemeProvider\n} from \"@material-ui/core/styles\";\nimport { CssBaseline, Grid } from \"@material-ui/core\";\n\n//Components\nimport Header from \"./Header\";\nimport Puzzle from \"./Puzzle\";\nimport SolveButton from \"./SolveButton\";\nimport Solutions from \"./Solutions\";\nimport SettingsFab from \"./SettingsFab\";\n\nconst useStyles = makeStyles({\n  root: { marginTop: \"1em\" }\n});\n\nconst App: React.FC = () => {\n  const { uiStore } = useStore();\n  const classes = useStyles();\n\n  return useObserver(() => (\n    <ThemeProvider theme={createMuiTheme(uiStore.themeOptions)}>\n      <CssBaseline />\n      <Grid\n        className={classes.root}\n        container\n        direction=\"column\"\n        spacing={3}\n        alignItems=\"center\"\n      >\n        <Header />\n        <Puzzle />\n        <SolveButton />\n        <Solutions />\n      </Grid>\n      <SettingsFab />\n    </ThemeProvider>\n  ));\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { action, observable, computed } from \"mobx\";\nimport { RootStore } from \"./RootStore\";\nimport { NumberRange, SudokuGrid } from \"../types/SudokuTypes\";\n\nexport class PuzzleStore {\n  rootStore: RootStore;\n  @observable puzzleState: SudokuGrid;\n  @observable solutions: SudokuGrid[] = [];\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    this.puzzleState = [\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n  }\n\n  @action\n  setNumber(y: number, x: number, value: NumberRange) {\n    this.puzzleState[y][x] = value;\n  }\n\n  @action\n  clearSolutions() {\n    this.solutions = [];\n  }\n\n  @action\n  solve() {\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        //Look for an empty space\n        if (this.puzzleState[y][x] === \"\") {\n          //Attempt to find a possible value\n          for (let v = 1; v < 10; v++) {\n            if (this.checkIfValuePossible(y, x, v)) {\n              //If value works set it and resolve\n              this.setNumber(y, x, v as NumberRange);\n              this.solve();\n              this.setNumber(y, x, \"\");\n            }\n          }\n          return;\n        }\n      }\n    }\n    this.solutions.push(\n      this.puzzleState.map((row) => row.slice()) as SudokuGrid\n    );\n    return;\n  }\n\n  @computed\n  get numSolutions() {\n    return this.solutions.length;\n  }\n\n  isValidNumber(value: number | \"\"): value is NumberRange {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, \"\"].includes(value);\n  }\n\n  checkIfValuePossible(y: number, x: number, value: number) {\n    const rowPossible = this.checkRowForValue(y, value);\n    const columnPossible = this.checkColumnForValue(x, value);\n    const subSquarePossible = this.checkSubSquareForValue(y, x, value);\n\n    if (rowPossible && columnPossible && subSquarePossible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkRowForValue(y: number, value: number) {\n    for (let i = 0; i < 9; i++) {\n      if (this.puzzleState[y][i] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkColumnForValue(x: number, value: number) {\n    for (let i = 0; i < 9; i++) {\n      if (this.puzzleState[i][x] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkSubSquareForValue(y: number, x: number, value: number) {\n    const x0 = Math.floor(x / 3) * 3;\n    const y0 = Math.floor(y / 3) * 3;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.puzzleState[y0 + i][x0 + j] === value) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import { RootStore } from \"./RootStore\";\nimport { ThemeOptions } from \"@material-ui/core\";\nimport { action, observable } from \"mobx\";\n\nexport class UIStore {\n  @observable themeOptions: ThemeOptions;\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    this.themeOptions = { palette: { type: \"light\" } };\n  }\n\n  @action\n  toggleDarkMode() {\n    this.themeOptions = {\n      ...this.themeOptions,\n      palette: {\n        ...this.themeOptions.palette,\n        type: this.themeOptions.palette?.type === \"dark\" ? \"light\" : \"dark\"\n      }\n    };\n  }\n}\n","import React, { createContext, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { RootStore } from \"./store/RootStore\";\n\nconst StoreContext = createContext<RootStore>({} as RootStore);\nexport const useStore = (): RootStore => useContext(StoreContext);\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreContext.Provider value={new RootStore()}>\n      <App />\n    </StoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { PuzzleStore } from \"./PuzzleStore\";\nimport { UIStore } from \"./UIStore\";\n\nexport class RootStore {\n  puzzleStore: PuzzleStore;\n  uiStore: UIStore;\n\n  constructor() {\n    this.puzzleStore = new PuzzleStore(this);\n    this.uiStore = new UIStore(this);\n  }\n}\n"],"sourceRoot":""}