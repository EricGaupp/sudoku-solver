{"version":3,"sources":["store/PuzzleStore.ts","store/UIStore.ts","store/RootStore.ts","storeSetup.tsx","components/Header.tsx","components/PuzzleBoard.tsx","components/PuzzleInput.tsx","components/SolveButton.tsx","components/ClearButton.tsx","components/Solutions.tsx","components/SettingsFab.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["PuzzleStore","rootStore","handleInputChange","y","x","value","isValidNumber","setNumber","this","puzzleState","solutions","v","checkIfValuePossible","solve","push","map","row","slice","includes","rowPossible","checkRowForValue","columnPossible","checkColumnForValue","subSquarePossible","checkSubSquareForValue","i","x0","Math","floor","y0","j","some","nonNullValues","forEach","number","length","observable","action","computed","UIStore","themeOptions","palette","type","RootStore","puzzleStore","uiStore","storeContext","createContext","StoreProvider","props","Provider","children","useStore","useContext","Header","Typography","variant","align","useStyles","makeStyles","theme","borderLeft","text","primary","borderRight","borderTop","borderBottom","column","PuzzleBoard","gameState","render","classes","useObserver","Grid","item","xs","container","direction","alignItems","yIndex","key","className","xIndex","justify","data-testid","inputBase","margin","spacing","removedArrows","textAlign","WebkitAppearance","PuzzleInput","handleChange","InputBase","fullWidth","inputProps","min","max","onChange","event","input","newGridValue","parseInt","target","ColorButton","withStyles","root","color","success","contrastText","backgroundColor","main","dark","Button","SolveButton","handleSolveClick","clearSolutions","onClick","ClearButton","handleClick","clearPuzzle","Zoom","in","clearPuzzleEnabled","Solutions","solution","index","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","fab","position","bottom","right","SettingsFab","useTheme","trigger","useScrollTrigger","disableHysteresis","threshold","Fab","aria-label","toggleDarkMode","marginTop","App","ThemeProvider","createMuiTheme","CssBaseline","md","lg","numSolutions","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1b31878.chunk.js","sourcesContent":["import { action, observable, computed } from \"mobx\";\nimport { RootStore } from \"./RootStore\";\nimport { NumberRange, SudokuGrid } from \"../types/SudokuTypes\";\n\nexport class PuzzleStore {\n  rootStore: RootStore;\n  @observable puzzleState: SudokuGrid;\n  @observable solutions: SudokuGrid[] = [];\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    this.puzzleState = [\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    // this.puzzleState = [\n    //   [\"\", 9, \"\", \"\", \"\", \"\", \"\", \"\", 6],\n    //   [\"\", \"\", \"\", 9, 6, \"\", 4, 8, 5],\n    //   [\"\", \"\", \"\", 5, 8, 1, \"\", \"\", \"\"],\n    //   [\"\", \"\", 4, \"\", \"\", \"\", \"\", \"\", \"\"],\n    //   [5, 1, 7, 2, \"\", \"\", 9, \"\", \"\"],\n    //   [6, \"\", 2, \"\", \"\", \"\", 3, 7, \"\"],\n    //   [1, \"\", \"\", 8, \"\", 4, \"\", 2, \"\"],\n    //   [\"\", \"\", \"\", \"\", \"\", \"\", 8, 1, \"\"],\n    //   [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    // ];\n  }\n\n  @action\n  setNumber(y: number, x: number, value: NumberRange) {\n    this.puzzleState[y][x] = value;\n  }\n\n  @computed\n  get clearPuzzleEnabled() {\n    return this.puzzleState.some((row) => {\n      let nonNullValues: number = 0;\n      [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((number) => {\n        if (row.includes(number as NumberRange)) {\n          nonNullValues++;\n        }\n      });\n      return nonNullValues > 0;\n    });\n  }\n\n  @action\n  clearPuzzle() {\n    this.puzzleState = [\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n  }\n\n  @action\n  clearSolutions() {\n    this.solutions = [];\n  }\n\n  @action\n  solve() {\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        //Look for an empty space\n        if (this.puzzleState[y][x] === \"\") {\n          //Attempt to find a possible value\n          for (let v = 1; v < 10; v++) {\n            if (this.checkIfValuePossible(y, x, v)) {\n              //If value works set it and resolve\n              this.setNumber(y, x, v as NumberRange);\n              this.solve();\n              this.setNumber(y, x, \"\");\n            }\n          }\n          return;\n        }\n      }\n    }\n    this.solutions.push(\n      this.puzzleState.map((row) => row.slice()) as SudokuGrid\n    );\n    return;\n  }\n\n  @computed\n  get numSolutions() {\n    return this.solutions.length;\n  }\n\n  isValidNumber(value: number | \"\"): value is NumberRange {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, \"\"].includes(value);\n  }\n\n  handleInputChange = (y: number, x: number, value: number | \"\") => {\n    if (this.isValidNumber(value)) {\n      this.setNumber(y, x, value);\n    }\n  };\n\n  checkIfValuePossible(y: number, x: number, value: number) {\n    const rowPossible = this.checkRowForValue(y, value);\n    const columnPossible = this.checkColumnForValue(x, value);\n    const subSquarePossible = this.checkSubSquareForValue(y, x, value);\n\n    if (rowPossible && columnPossible && subSquarePossible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkRowForValue(y: number, value: number) {\n    for (let i = 0; i < 9; i++) {\n      if (this.puzzleState[y][i] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkColumnForValue(x: number, value: number) {\n    for (let i = 0; i < 9; i++) {\n      if (this.puzzleState[i][x] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkSubSquareForValue(y: number, x: number, value: number) {\n    const x0 = Math.floor(x / 3) * 3;\n    const y0 = Math.floor(y / 3) * 3;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.puzzleState[y0 + i][x0 + j] === value) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import { RootStore } from \"./RootStore\";\nimport { ThemeOptions } from \"@material-ui/core\";\nimport { action, observable } from \"mobx\";\n\nexport class UIStore {\n  @observable themeOptions: ThemeOptions;\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    this.themeOptions = { palette: { type: \"light\" } };\n  }\n\n  @action\n  toggleDarkMode() {\n    this.themeOptions = {\n      ...this.themeOptions,\n      palette: {\n        ...this.themeOptions.palette,\n        type: this.themeOptions.palette?.type === \"dark\" ? \"light\" : \"dark\"\n      }\n    };\n  }\n}\n","import { PuzzleStore } from \"./PuzzleStore\";\nimport { UIStore } from \"./UIStore\";\n\nexport class RootStore {\n  puzzleStore: PuzzleStore;\n  uiStore: UIStore;\n\n  constructor() {\n    this.puzzleStore = new PuzzleStore(this);\n    this.uiStore = new UIStore(this);\n  }\n}\n","import React, { createContext, useContext } from \"react\";\nimport { RootStore } from \"./store/RootStore\";\nimport { PuzzleStore } from \"./store/PuzzleStore\";\nimport { UIStore } from \"./store/UIStore\";\n\nconst storeContext = createContext<RootStore>(new RootStore());\n\nexport const StoreProvider: React.FC = (props) => {\n  return (\n    <storeContext.Provider value={new RootStore()}>\n      {props.children}\n    </storeContext.Provider>\n  );\n};\n\nexport const useStore = (): RootStore => useContext(storeContext);\n\nexport const usePuzzleStore = (): PuzzleStore => {\n  const { puzzleStore } = useContext(storeContext);\n  return puzzleStore;\n};\n\nexport const useUIStore = (): UIStore => {\n  const { uiStore } = useContext(storeContext);\n  return uiStore;\n};\n","import React from \"react\";\n\nimport { Typography } from \"@material-ui/core\";\n\nconst Header: React.FC = () => {\n  return (\n    <Typography variant=\"h2\" align=\"center\">\n      Sudoku Solver\n    </Typography>\n  );\n};\n\nexport default Header;\n","import React, { ReactNode } from \"react\";\n\n//MaterialUI Components\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\n\n//Types\nimport { NumberRange, SudokuGrid } from \"../types/SudokuTypes\";\nimport { useObserver } from \"mobx-react-lite\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  row: {\n    borderLeft: `3px solid ${theme.palette.text.primary}`,\n    borderRight: `3px solid ${theme.palette.text.primary}`,\n    \"&:nth-child(n)\": {\n      borderTop: `1px solid ${theme.palette.text.primary}`,\n    },\n    \"&:nth-child(3n-2)\": {\n      borderTop: `3px solid ${theme.palette.text.primary}`,\n    },\n    \"&:last-child\": {\n      borderBottom: `3px solid ${theme.palette.text.primary}`,\n    },\n  },\n  column: {\n    \"&:first-child\": {\n      borderLeft: \"none\",\n    },\n    \"&:nth-child(n+2)\": {\n      borderLeft: `1px solid ${theme.palette.text.primary}`,\n    },\n    \"&:nth-child(3n)\": {\n      borderRight: `3px solid ${theme.palette.text.primary}`,\n    },\n    \"&:last-child\": {\n      borderRight: \"none\",\n    },\n  },\n}));\n\ninterface IPuzzleBoard {\n  gameState: SudokuGrid;\n  render: (state: IRenderState) => ReactNode;\n}\n\ninterface IRenderState {\n  value: NumberRange;\n  y: number;\n  x: number;\n}\n\nconst PuzzleBoard: React.FC<IPuzzleBoard> = ({ gameState, render }) => {\n  const classes = useStyles();\n\n  return useObserver(() => (\n    <Grid item xs container direction=\"column\" alignItems=\"center\">\n      {gameState.map((row, yIndex) => (\n        <Grid key={`row${yIndex}`} className={classes.row} item container>\n          {row.map((column, xIndex) => (\n            <Grid\n              key={`y${yIndex}x${xIndex}`}\n              className={classes.column}\n              item\n              xs\n              container\n              justify=\"center\"\n              data-testid={`puzzle-grid-row${yIndex}-column${xIndex}`}\n            >\n              {render({\n                value: gameState[yIndex][xIndex],\n                y: yIndex,\n                x: xIndex,\n              })}\n            </Grid>\n          ))}\n        </Grid>\n      ))}\n    </Grid>\n  ));\n};\n\nexport default PuzzleBoard;\n","import React from \"react\";\n\n//MaterialUI Components\nimport { InputBase } from \"@material-ui/core\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\n\n//Types\nimport { NumberRange } from \"../types/SudokuTypes\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  inputBase: {\n    margin: theme.spacing(1),\n  },\n  removedArrows: {\n    textAlign: \"center\",\n    \"&::-webkit-inner-spin-button, input::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: 0,\n    },\n  },\n}));\n\ninterface IPuzzleInput {\n  value: NumberRange;\n  x: number;\n  y: number;\n  handleChange: (y: number, x: number, value: number | \"\") => void;\n}\n\nconst PuzzleInput: React.FC<IPuzzleInput> = ({ value, x, y, handleChange }) => {\n  const classes = useStyles();\n\n  function handleInputChange(input: string) {\n    let newGridValue: number | \"\";\n    if (parseInt(input, 10) > 0 && parseInt(input, 10) < 10) {\n      newGridValue = parseInt(input, 10);\n    } else if (input === \"\") {\n      newGridValue = \"\";\n    } else {\n      return;\n    }\n    // if (puzzleStore.isValidNumber(newGridValue)) {\n    //   puzzleStore.setNumber(y, x, newGridValue);\n    // }\n    handleChange(y, x, newGridValue);\n  }\n\n  return (\n    <InputBase\n      className={classes.inputBase}\n      type=\"number\"\n      fullWidth\n      inputProps={{\n        min: 1,\n        max: 9,\n        className: classes.removedArrows,\n        \"aria-label\": `Input Row ${y} Column ${x}`,\n        \"data-testid\": `row${y}-col${x}-input`,\n      }}\n      onChange={(event) => handleInputChange(event.target.value)}\n      value={value}\n    />\n  );\n};\n\nexport default PuzzleInput;\n","import React from \"react\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../storeSetup\";\n\n//MaterialUI Components\nimport { Theme, withStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\n\nconst ColorButton = withStyles((theme: Theme) => ({\n  root: {\n    color: theme.palette.success.contrastText,\n    backgroundColor: theme.palette.success.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.success.dark,\n    },\n  },\n}))(Button);\n\nconst SolveButton: React.FC = () => {\n  const { puzzleStore } = useStore();\n\n  const handleSolveClick = () => {\n    puzzleStore.clearSolutions();\n    puzzleStore.solve();\n  };\n\n  return useObserver(() => (\n    <ColorButton variant=\"contained\" onClick={handleSolveClick}>\n      Solve\n    </ColorButton>\n  ));\n};\n\nexport default SolveButton;\n","import React from \"react\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../storeSetup\";\n\n//MaterialUI Components\nimport { Button, Zoom } from \"@material-ui/core\";\n\nconst ClearButton: React.FC = () => {\n  const { puzzleStore } = useStore();\n\n  const handleClick = () => {\n    puzzleStore.clearPuzzle();\n  };\n\n  return useObserver(() => (\n    <Zoom in={puzzleStore.clearPuzzleEnabled}>\n      <Button variant=\"outlined\" onClick={handleClick}>\n        Clear\n      </Button>\n    </Zoom>\n  ));\n};\n\nexport default ClearButton;\n","import React from \"react\";\n\n//MobX\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../storeSetup\";\n\n//MaterialUI Components\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\n\n//Components\nimport PuzzleBoard from \"./PuzzleBoard\";\n\n//Icons\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n//Types\nimport { SudokuGrid } from \"../types/SudokuTypes\";\n\nconst Solutions: React.FC = () => {\n  const { puzzleStore } = useStore();\n\n  return useObserver(() => (\n    <>\n      {puzzleStore.solutions.map((solution: SudokuGrid, index: number) => (\n        <Grid item key={index} xs>\n          <ExpansionPanel>\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls={`solution${index}`}\n              id={`solution${index}-header`}\n            >\n              <Typography>{`Solution ${index + 1}`}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <PuzzleBoard\n                gameState={solution}\n                render={({ value }) => (\n                  <Typography variant=\"h4\">{value}</Typography>\n                )}\n              />\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </Grid>\n      ))}\n    </>\n  ));\n};\n\nexport default Solutions;\n","import React from \"react\";\nimport { useStore } from \"../storeSetup\";\n\n//MaterialUI Components\nimport { makeStyles, Theme, useTheme } from \"@material-ui/core/styles\";\nimport { Fab, useScrollTrigger, Zoom } from \"@material-ui/core\";\n\n//Material Icons\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nconst SettingsFab: React.FC = () => {\n  const { uiStore } = useStore();\n  const classes = useStyles();\n  const theme = useTheme();\n  const trigger = useScrollTrigger({ disableHysteresis: true, threshold: 20 });\n\n  return (\n    <Zoom in={!trigger}>\n      <Fab\n        aria-label=\"Toggle DarkMode\"\n        className={classes.fab}\n        onClick={() => uiStore.toggleDarkMode()}\n      >\n        {theme.palette.type === \"dark\" ? (\n          <BrightnessHighIcon />\n        ) : (\n          <Brightness3Icon />\n        )}\n      </Fab>\n    </Zoom>\n  );\n};\n\nexport default SettingsFab;\n","import React from \"react\";\n\n//MobX\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStore } from \"../storeSetup\";\n\n//MaterialUI Components\nimport {\n  createMuiTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport { CssBaseline, Grid, Typography } from \"@material-ui/core\";\n\n//Components\nimport Header from \"./Header\";\nimport PuzzleBoard from \"./PuzzleBoard\";\nimport PuzzleInput from \"./PuzzleInput\";\nimport SolveButton from \"./SolveButton\";\nimport ClearButton from \"./ClearButton\";\nimport Solutions from \"./Solutions\";\nimport SettingsFab from \"./SettingsFab\";\n\nconst useStyles = makeStyles({\n  root: { marginTop: \"1em\" },\n});\n\nconst App: React.FC = () => {\n  const { puzzleStore, uiStore } = useStore();\n  const classes = useStyles();\n\n  return useObserver(() => (\n    <ThemeProvider theme={createMuiTheme(uiStore.themeOptions)}>\n      <CssBaseline />\n      <Grid\n        className={classes.root}\n        container\n        direction=\"column\"\n        spacing={3}\n        alignItems=\"center\"\n      >\n        <Grid item container justify=\"center\">\n          <Header />\n        </Grid>\n        <Grid item xs={11} md={9} lg={6} container>\n          <PuzzleBoard\n            gameState={puzzleStore.puzzleState}\n            render={({ value, x, y }) => (\n              <PuzzleInput\n                value={value}\n                handleChange={puzzleStore.handleInputChange}\n                x={x}\n                y={y}\n              />\n            )}\n          />\n        </Grid>\n        <Grid item>\n          <SolveButton />\n        </Grid>\n        <Grid item>\n          <ClearButton />\n        </Grid>\n        <Grid item>\n          <Typography variant=\"subtitle1\">{`Number of Solutions: ${puzzleStore.numSolutions}`}</Typography>\n        </Grid>\n        {puzzleStore.solutions.length > 0 && (\n          <Grid item xs={11} md={9} lg={6} container direction=\"column\">\n            <Solutions />\n          </Grid>\n        )}\n      </Grid>\n      <SettingsFab />\n    </ThemeProvider>\n  ));\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { StoreProvider } from \"./storeSetup\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}